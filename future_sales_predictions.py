# -*- coding: utf-8 -*-
"""future_sales_predictions

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19Exb1j-L3qiQyg5IxgAqj59VaLqkukxu

# **Future sales prediction using python**

# Importing libraries
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

"""# Initial data exploration"""

data = pd.read_csv("https://raw.githubusercontent.com/amankharwal/Website-data/master/advertising.csv")
print(data.head())

print(data.isnull().sum())

"""# Visualising the amount of money spent on Tv and the sold"""

import plotly.express as px
import plotly.graph_objects as go
figure = px.scatter(data_frame = data, x="Sales",
                    y="TV", size="TV", trendline="ols")
figure.show()

"""# Visualize the relationship between the amount spent on advertising on newspapers and units sold:"""

figure = px.scatter(data_frame = data, x="Sales",
                    y="Newspaper", size="Newspaper", trendline="ols")
figure.show()

"""# Visualize the relationship between the amount spent on advertising on radio and units sold:"""

figure = px.scatter(data_frame = data, x="Sales",
                    y="Radio", size="Radio", trendline="ols")
figure.show()

"""# Correlation"""

correlation = data.corr()
print(correlation["Sales"].sort_values(ascending=False))

"""# **Future Sales Prediction Model**

# Splitting the data into train set and test set
"""

x = np.array(data.drop(["Sales"], 1))
y = np.array(data["Sales"])
xtrain, xtest, ytrain, ytest = train_test_split(x, y, 
                                                test_size=0.2, 
                                                random_state=42)

"""# Train the model to predict future sales"""

model = LinearRegression()
model.fit(xtrain, ytrain)
print(model.score(xtest, ytest))

"""# Predicting the number of units sold as per the amount spent"""

#features = [[TV, Radio, Newspaper]]
features = np.array([[230.1, 37.8, 69.2]])
print(model.predict(features))